%option nounput
%option noinput
%option noyywrap
%{
	#include "error_handler.h"
	#include "definitions.h"
	#include "term.h"
	#include "y.tab.h"

%}



/* Dixitos */
digit                       ([0-9]_?)+
/*Exponentes e10/e-10/e+15*/
exp                         "e"[+-]?{digit}+
/*Numeros enteiros 10/10e10/10e-10*/
number                      {digit}{exp}?
/*Números decimais 3.14/3.14e10/3.14e-10  */
decimal                     ({digit})*\.({digit}){exp}?
/*Binario octal e hexadecimal*/

binstart					"0"[bB]
hexstart					"0"[xX]
octstart 					"0"[oO]

bin                         {binstart}[01]+
hex                         {hexstart}[0-9a-fA-F]+
oct                         {octstart}[0-7]+

/*Simbolos compostos*/
shiftl						"<<"			
shiftr						">>"		
pow							"**"		
fdiv						"\/\/"		
leq							"<="		
geq							">="		
eq							"=="			
neq							"!="		
addeq						"+="		
subeq						"-="		
muleq						"*="		
diveq						"/="		
pereq						"%="		
poweq						"**="		
fdiveq						"\/\/="

/*Simbolos simples*/
simpletokens                "+"|"-"|"*"|"\/"|"%"|"@"|"&"|"|"|"^"|"~"|"("|")"|"["|"]"|"{"|"}"|","|":"|"."|";"|"="|">"|"<"	


/*Comentario #*/
comment                     "#"[^\n]*
/*Identificador*/
alphanumeric                [a-zA-Z0-9_]

alpha                		[a-zA-Z_]


%%
"sin"	 	 		{return _FALSE;}
"cos"	 	 		{return _AWAIT;}


{bin}               {return _INTEGER;}
{hex}               {return _INTEGER;}
{oct}               {return _INTEGER;}

{binstart}.?		{
	/*Empeza por 0b pero non continua con números binarios */
	handle_lexical_error(ERR_NUMERIC,yytext);
	return _TERROR;
}
{hexstart}.?		{
	/*Empeza por 0x pero non continua con números hexadecimais */
	handle_lexical_error(ERR_NUMERIC,yytext);
	return _TERROR;
} 
{octstart}.?		{
	/*Empeza por 0o pero non continua con números octais */
	handle_lexical_error(ERR_NUMERIC,yytext);
	return _TERROR;
} 

{decimal}           {return _DECIMAL;}
{number}            {return INTEGER;}





{shiftl}			{return _SHIFTL;}
{shiftr}			{return _SHIFTR;}
{pow}				{return _POW;}
{fdiv}				{return _FDIV;}
{leq}				{return _LEQ;}
{geq}				{return _GEQ;}
{eq}				{return _EQ;}
{neq}				{return _NEQ;}
{addeq}				{return _ADDEQ;}
{subeq}				{return _SUBEQ;}
{muleq}				{return _MULEQ;}
{diveq}				{return _DIVEQ;}
{pereq}				{return _PEREQ;}
{poweq}				{return _POWEQ;}
{fdiveq}			{return _FDIVEQ;}






{simpletokens}        	{return yytext[0];}
{comment}             	{ /*Ignoro os comentarios */}

{alpha}{alphanumeric}+ 	{
	return _ID;     
}


[\n\r]                   {
	prompt();
}

[ \t]+               { }
.                    { }
<<EOF>>              { return _EOF;}
%%
